"use server";
import { findFormTemplateByCode } from "@/lib/mongodb";
import {
  QuickUpdateFormData,
  quickUpdateFormSchema,
} from "@/lib/schemas/form-codes";

import { revalidatePath } from "next/cache";
import { prisma } from "@/lib/prisma";
import {
  FormFormData,
  NewCodeUpdateFormData,
  UpdateFormFormData,
  formSchema,
  newCodeUpdateFormSchema,
  updateFormSchema,
} from "@/lib/schemas/form-codes";
import { validateRequest } from "@/lib/lucia";

// Táº¡o má»›i biá»ƒu máº«u
export async function createForm(data: FormFormData) {
  try {
    // Kiá»ƒm tra xÃ¡c thá»±c
    const { user } = await validateRequest();
    if (!user) {
      return {
        success: false,
        message: "Báº¡n cáº§n Ä‘Äƒng nháº­p Ä‘á»ƒ thá»±c hiá»‡n thao tÃ¡c nÃ y",
      };
    }
    // Validate dá»¯ liá»‡u Ä‘áº§u vÃ o
    const validated = formSchema.parse(data);

    // Kiá»ƒm tra loáº¡i biá»ƒu máº«u tá»“n táº¡i
    const formType = await prisma.formType.findUnique({
      where: { id: validated.formTypeId },
    });

    if (!formType) {
      return { success: false, message: "Loáº¡i biá»ƒu máº«u khÃ´ng tá»“n táº¡i" };
    }

    // Kiá»ƒm tra trÃ¹ng láº·p mÃ£ biá»ƒu máº«u trong cÃ¹ng loáº¡i
    const existing = await prisma.form.findFirst({
      where: {
        formTypeId: validated.formTypeId,
        code: validated.code,
      },
    });

    if (existing) {
      return {
        success: false,
        message: "MÃ£ biá»ƒu máº«u Ä‘Ã£ tá»“n táº¡i trong loáº¡i nÃ y",
      };
    }

    // Táº¡o má»›i
    const form = await prisma.form.create({
      data: validated,
    });

    revalidatePath("/form-codes");
    return { success: true, data: form };
  } catch (error) {
    console.error("Error creating form:", error);
    return { success: false, message: "KhÃ´ng thá»ƒ táº¡o biá»ƒu máº«u" };
  }
}

// Cáº­p nháº­t biá»ƒu máº«u
export async function updateForm(data: UpdateFormFormData) {
  try {
    // Kiá»ƒm tra xÃ¡c thá»±c
    const { user } = await validateRequest();
    if (!user) {
      return {
        success: false,
        message: "Báº¡n cáº§n Ä‘Äƒng nháº­p Ä‘á»ƒ thá»±c hiá»‡n thao tÃ¡c nÃ y",
      };
    }
    // Validate dá»¯ liá»‡u Ä‘áº§u vÃ o
    const validated = updateFormSchema.parse(data);
    const { id, ...updateData } = validated;

    // Kiá»ƒm tra tá»“n táº¡i
    const existing = await prisma.form.findUnique({
      where: { id },
    });

    if (!existing) {
      return { success: false, message: "Biá»ƒu máº«u khÃ´ng tá»“n táº¡i" };
    }

    // Kiá»ƒm tra trÃ¹ng láº·p náº¿u thay Ä‘á»•i code hoáº·c formTypeId
    if (
      (updateData.code && updateData.code !== existing.code) ||
      (updateData.formTypeId && updateData.formTypeId !== existing.formTypeId)
    ) {
      const formTypeId = updateData.formTypeId || existing.formTypeId;
      const code = updateData.code || existing.code;

      const duplicate = await prisma.form.findFirst({
        where: {
          formTypeId,
          code,
          id: { not: id },
        },
      });

      if (duplicate) {
        return {
          success: false,
          message: "MÃ£ biá»ƒu máº«u Ä‘Ã£ tá»“n táº¡i trong loáº¡i nÃ y",
        };
      }
    }

    // Cáº­p nháº­t
    const form = await prisma.form.update({
      where: { id },
      data: updateData,
    });

    revalidatePath("/form-codes");
    return { success: true, data: form };
  } catch (error) {
    console.error("Error updating form:", error);
    return { success: false, message: "KhÃ´ng thá»ƒ cáº­p nháº­t biá»ƒu máº«u" };
  }
}

// XÃ³a biá»ƒu máº«u
export async function deleteForm(id: string) {
  try {
    // Kiá»ƒm tra xÃ¡c thá»±c
    const { user } = await validateRequest();
    if (!user) {
      return {
        success: false,
        message: "Báº¡n cáº§n Ä‘Äƒng nháº­p Ä‘á»ƒ thá»±c hiá»‡n thao tÃ¡c nÃ y",
      };
    }
    // Kiá»ƒm tra tá»“n táº¡i
    const existing = await prisma.form.findUnique({
      where: { id },
    });

    if (!existing) {
      return { success: false, message: "Biá»ƒu máº«u khÃ´ng tá»“n táº¡i" };
    }

    // XÃ³a
    await prisma.form.delete({
      where: { id },
    });

    revalidatePath("/form-codes");
    return { success: true, message: "XÃ³a biá»ƒu máº«u thÃ nh cÃ´ng" };
  } catch (error) {
    console.error("Error deleting form:", error);
    return { success: false, message: "KhÃ´ng thá»ƒ xÃ³a biá»ƒu máº«u" };
  }
}

// Láº¥y táº¥t cáº£ biá»ƒu máº«u
export async function getAllForms() {
  try {
    // Kiá»ƒm tra xÃ¡c thá»±c
    const { user } = await validateRequest();
    if (!user) {
      return {
        success: false,
        message: "Báº¡n cáº§n Ä‘Äƒng nháº­p Ä‘á»ƒ thá»±c hiá»‡n thao tÃ¡c nÃ y",
      };
    }
    const forms = await prisma.form.findMany({
      include: { formType: true },
      orderBy: [{ formType: { type: "asc" } }, { seq: "asc" }],
    });
    console.log("ðŸš€ ~ getAllForms ~ forms:", forms.length);

    return { success: true, data: forms };
  } catch (error) {
    console.error("Error fetching forms:", error);
    return {
      success: false,
      message: "KhÃ´ng thá»ƒ láº¥y danh sÃ¡ch biá»ƒu máº«u",
      data: [],
    };
  }
}

// Láº¥y biá»ƒu máº«u theo ID
export async function getFormById(id: string) {
  try {
    // Kiá»ƒm tra xÃ¡c thá»±c
    const { user } = await validateRequest();
    if (!user) {
      return {
        success: false,
        message: "Báº¡n cáº§n Ä‘Äƒng nháº­p Ä‘á»ƒ thá»±c hiá»‡n thao tÃ¡c nÃ y",
      };
    }
    const form = await prisma.form.findUnique({
      where: { id },
      include: { formType: true, formDetails: true },
    });

    if (!form) {
      return { success: false, message: "Biá»ƒu máº«u khÃ´ng tá»“n táº¡i" };
    }

    return { success: true, data: form };
  } catch (error) {
    console.error("Error fetching form:", error);
    return { success: false, message: "KhÃ´ng thá»ƒ láº¥y thÃ´ng tin biá»ƒu máº«u" };
  }
}

// Láº¥y biá»ƒu máº«u theo loáº¡i
export async function getFormsByType(formTypeId: string) {
  try {
    // Kiá»ƒm tra xÃ¡c thá»±c
    const { user } = await validateRequest();
    if (!user) {
      return {
        success: false,
        message: "Báº¡n cáº§n Ä‘Äƒng nháº­p Ä‘á»ƒ thá»±c hiá»‡n thao tÃ¡c nÃ y",
      };
    }
    const forms = await prisma.form.findMany({
      where: { formTypeId },
      include: { formDetails: true, formType: true },
      orderBy: { seq: "asc" },
    });

    return { success: true, data: forms };
  } catch (error) {
    console.error("Error fetching forms by type:", error);
    return {
      success: false,
      message: "KhÃ´ng thá»ƒ láº¥y danh sÃ¡ch biá»ƒu máº«u theo loáº¡i",
    };
  }
}

// Cáº­p nháº­t nhanh form tá»« MongoDB
export async function quickUpdateForm(data: QuickUpdateFormData) {
  try {
    // Kiá»ƒm tra xÃ¡c thá»±c
    const { user } = await validateRequest();
    if (!user) {
      return {
        success: false,
        message: "Báº¡n cáº§n Ä‘Äƒng nháº­p Ä‘á»ƒ thá»±c hiá»‡n thao tÃ¡c nÃ y",
      };
    }
    // Validate dá»¯ liá»‡u Ä‘áº§u vÃ o
    const validated = quickUpdateFormSchema.parse(data);

    // TÃ¬m template trong MongoDB
    const template = await findFormTemplateByCode(validated.code);

    if (!template) {
      return {
        success: false,
        message: `KhÃ´ng tÃ¬m tháº¥y biá»ƒu máº«u vá»›i mÃ£ ${validated.code} trong MongoDB`,
      };
    }

    // Kiá»ƒm tra form Ä‘Ã£ tá»“n táº¡i trong PostgreSQL chÆ°a
    const existingForm = await prisma.form.findFirst({
      where: {
        code: validated.code,
      },
    });

    if (existingForm) {
      // Cáº­p nháº­t form hiá»‡n cÃ³
      const updatedForm = await prisma.form.update({
        where: { id: existingForm.id },
        data: {
          name: template.name,
          templateuid: template._id.toString(),
        },
      });

      revalidatePath("/form-codes");
      return {
        success: true,
        data: updatedForm,
        message: "Cáº­p nháº­t biá»ƒu máº«u thÃ nh cÃ´ng",
      };
    } else {
      return {
        success: false,
        message: `KhÃ´ng tÃ¬m tháº¥y biá»ƒu máº«u vá»›i mÃ£ ${validated.code} trong danh sÃ¡ch`,
      };
    }
  } catch (error) {
    console.error("Lá»—i cáº­p nháº­t nhanh form:", error);
    return { success: false, message: "KhÃ´ng thá»ƒ cáº­p nháº­t biá»ƒu máº«u" };
  }
}

// Kiá»ƒm tra form tá»“n táº¡i
export async function checkFormExists(code: string) {
  try {
    // Kiá»ƒm tra xÃ¡c thá»±c
    const { user } = await validateRequest();
    if (!user) {
      return {
        success: false,
        message: "Báº¡n cáº§n Ä‘Äƒng nháº­p Ä‘á»ƒ thá»±c hiá»‡n thao tÃ¡c nÃ y",
      };
    }
    // Kiá»ƒm tra form Ä‘Ã£ tá»“n táº¡i trong PostgreSQL chÆ°a
    const existingForm = await prisma.form.findFirst({
      where: {
        code,
      },
    });

    if (!existingForm) {
      return {
        success: false,
        message: `KhÃ´ng tÃ¬m tháº¥y biá»ƒu máº«u vá»›i mÃ£ ${code} trong danh sÃ¡ch`,
      };
    }

    // TÃ¬m template trong MongoDB
    const template = await findFormTemplateByCode(code);

    if (!template) {
      return {
        success: false,
        message: `KhÃ´ng tÃ¬m tháº¥y biá»ƒu máº«u vá»›i mÃ£ ${code} trong MongoDB`,
      };
    }

    // Serialize MongoDB document to plain JavaScript object
    const serializedTemplate = JSON.parse(JSON.stringify(template));

    return {
      success: true,
      data: {
        existingForm,
        template: serializedTemplate,
      },
    };
  } catch (error) {
    console.error("Lá»—i kiá»ƒm tra form:", error);
    return { success: false, message: "KhÃ´ng thá»ƒ kiá»ƒm tra biá»ƒu máº«u" };
  }
}

// Cáº­p nháº­t form vá»›i code má»›i
export async function updateFormWithNewCode(data: NewCodeUpdateFormData) {
  try {
    // Kiá»ƒm tra xÃ¡c thá»±c
    const { user } = await validateRequest();
    if (!user) {
      return {
        success: false,
        message: "Báº¡n cáº§n Ä‘Äƒng nháº­p Ä‘á»ƒ thá»±c hiá»‡n thao tÃ¡c nÃ y",
      };
    }
    // Validate dá»¯ liá»‡u Ä‘áº§u vÃ o
    const validated = newCodeUpdateFormSchema.parse(data);

    // Kiá»ƒm tra form cÅ© tá»“n táº¡i
    const existingForms = await prisma.form.findMany({
      where: {
        code: validated.oldCode,
      },
    });

    if (existingForms.length === 0) {
      return {
        success: false,
        message: `KhÃ´ng tÃ¬m tháº¥y biá»ƒu máº«u vá»›i mÃ£ ${validated.oldCode} trong danh sÃ¡ch`,
      };
    }

    // TÃ¬m template má»›i trong MongoDB
    const newTemplate = await findFormTemplateByCode(validated.newCode);

    if (!newTemplate) {
      return {
        success: false,
        message: `KhÃ´ng tÃ¬m tháº¥y biá»ƒu máº«u vá»›i mÃ£ ${validated.newCode} trong MongoDB`,
      };
    }

    // Serialize MongoDB document to plain JavaScript object
    const serializedTemplate = JSON.parse(JSON.stringify(newTemplate));

    // Cáº­p nháº­t táº¥t cáº£ cÃ¡c form hiá»‡n cÃ³ cÃ³ cÃ¹ng mÃ£ code
    const updatePromises = existingForms.map((form) => {
      return prisma.form.update({
        where: { id: form.id },
        data: {
          code: validated.newCode,
          name: serializedTemplate.name,
          templateuid: serializedTemplate._id.toString(),
        },
      });
    });

    const updatedForms = await Promise.all(updatePromises);

    revalidatePath("/form-codes");
    return {
      success: true,
      data: updatedForms,
      message: "Cáº­p nháº­t biá»ƒu máº«u thÃ nh cÃ´ng",
    };
  } catch (error) {
    console.error("Lá»—i cáº­p nháº­t form vá»›i code má»›i:", error);
    return { success: false, message: "KhÃ´ng thá»ƒ cáº­p nháº­t biá»ƒu máº«u" };
  }
}
