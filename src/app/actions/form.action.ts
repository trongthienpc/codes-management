"use server";

import { revalidatePath } from "next/cache";
import { prisma } from "@/lib/prisma";
import {
  FormFormData,
  UpdateFormFormData,
  formSchema,
  updateFormSchema,
} from "@/lib/schemas/form-codes";

// Táº¡o má»›i biá»ƒu máº«u
export async function createForm(data: FormFormData) {
  try {
    // Validate dá»¯ liá»‡u Ä‘áº§u vÃ o
    const validated = formSchema.parse(data);

    // Kiá»ƒm tra loáº¡i biá»ƒu máº«u tá»“n táº¡i
    const formType = await prisma.formType.findUnique({
      where: { id: validated.formTypeId },
    });

    if (!formType) {
      return { success: false, message: "Loáº¡i biá»ƒu máº«u khÃ´ng tá»“n táº¡i" };
    }

    // Kiá»ƒm tra trÃ¹ng láº·p mÃ£ biá»ƒu máº«u trong cÃ¹ng loáº¡i
    const existing = await prisma.form.findFirst({
      where: {
        formTypeId: validated.formTypeId,
        code: validated.code,
      },
    });

    if (existing) {
      return {
        success: false,
        message: "MÃ£ biá»ƒu máº«u Ä‘Ã£ tá»“n táº¡i trong loáº¡i nÃ y",
      };
    }

    // Táº¡o má»›i
    const form = await prisma.form.create({
      data: validated,
    });

    revalidatePath("/form-codes");
    return { success: true, data: form };
  } catch (error) {
    console.error("Error creating form:", error);
    return { success: false, message: "KhÃ´ng thá»ƒ táº¡o biá»ƒu máº«u" };
  }
}

// Cáº­p nháº­t biá»ƒu máº«u
export async function updateForm(data: UpdateFormFormData) {
  try {
    // Validate dá»¯ liá»‡u Ä‘áº§u vÃ o
    const validated = updateFormSchema.parse(data);
    const { id, ...updateData } = validated;

    // Kiá»ƒm tra tá»“n táº¡i
    const existing = await prisma.form.findUnique({
      where: { id },
    });

    if (!existing) {
      return { success: false, message: "Biá»ƒu máº«u khÃ´ng tá»“n táº¡i" };
    }

    // Kiá»ƒm tra trÃ¹ng láº·p náº¿u thay Ä‘á»•i code hoáº·c formTypeId
    if (
      (updateData.code && updateData.code !== existing.code) ||
      (updateData.formTypeId && updateData.formTypeId !== existing.formTypeId)
    ) {
      const formTypeId = updateData.formTypeId || existing.formTypeId;
      const code = updateData.code || existing.code;

      const duplicate = await prisma.form.findFirst({
        where: {
          formTypeId,
          code,
          id: { not: id },
        },
      });

      if (duplicate) {
        return {
          success: false,
          message: "MÃ£ biá»ƒu máº«u Ä‘Ã£ tá»“n táº¡i trong loáº¡i nÃ y",
        };
      }
    }

    // Cáº­p nháº­t
    const form = await prisma.form.update({
      where: { id },
      data: updateData,
    });

    revalidatePath("/form-codes");
    return { success: true, data: form };
  } catch (error) {
    console.error("Error updating form:", error);
    return { success: false, message: "KhÃ´ng thá»ƒ cáº­p nháº­t biá»ƒu máº«u" };
  }
}

// XÃ³a biá»ƒu máº«u
export async function deleteForm(id: string) {
  try {
    // Kiá»ƒm tra tá»“n táº¡i
    const existing = await prisma.form.findUnique({
      where: { id },
    });

    if (!existing) {
      return { success: false, message: "Biá»ƒu máº«u khÃ´ng tá»“n táº¡i" };
    }

    // XÃ³a
    await prisma.form.delete({
      where: { id },
    });

    revalidatePath("/form-codes");
    return { success: true, message: "XÃ³a biá»ƒu máº«u thÃ nh cÃ´ng" };
  } catch (error) {
    console.error("Error deleting form:", error);
    return { success: false, message: "KhÃ´ng thá»ƒ xÃ³a biá»ƒu máº«u" };
  }
}

// Láº¥y táº¥t cáº£ biá»ƒu máº«u
export async function getAllForms() {
  try {
    const forms = await prisma.form.findMany({
      include: { formType: true },
      orderBy: [{ formType: { type: "asc" } }, { seq: "asc" }],
    });
    console.log("ðŸš€ ~ getAllForms ~ forms:", forms.length);

    return { success: true, data: forms };
  } catch (error) {
    console.error("Error fetching forms:", error);
    return {
      success: false,
      message: "KhÃ´ng thá»ƒ láº¥y danh sÃ¡ch biá»ƒu máº«u",
      data: [],
    };
  }
}

// Láº¥y biá»ƒu máº«u theo ID
export async function getFormById(id: string) {
  try {
    const form = await prisma.form.findUnique({
      where: { id },
      include: { formType: true, formDetails: true },
    });

    if (!form) {
      return { success: false, message: "Biá»ƒu máº«u khÃ´ng tá»“n táº¡i" };
    }

    return { success: true, data: form };
  } catch (error) {
    console.error("Error fetching form:", error);
    return { success: false, message: "KhÃ´ng thá»ƒ láº¥y thÃ´ng tin biá»ƒu máº«u" };
  }
}

// Láº¥y biá»ƒu máº«u theo loáº¡i
export async function getFormsByType(formTypeId: string) {
  try {
    const forms = await prisma.form.findMany({
      where: { formTypeId },
      include: { formDetails: true, formType: true },
      orderBy: { seq: "asc" },
    });

    return { success: true, data: forms };
  } catch (error) {
    console.error("Error fetching forms by type:", error);
    return {
      success: false,
      message: "KhÃ´ng thá»ƒ láº¥y danh sÃ¡ch biá»ƒu máº«u theo loáº¡i",
    };
  }
}
