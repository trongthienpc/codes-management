/* eslint-disable @typescript-eslint/no-explicit-any */
import { prisma } from "@/lib/prisma";
import fs from "fs";
import path from "path";

// Interface definitions for type safety
interface FormDetail {
  key: string;
  value: string;
}

interface FormData {
  templateuid: string;
  code: string;
  name: string;
  ismultiple: boolean;
  seq: number;
  formdetails?: FormDetail[];
}

interface TypeData {
  type: string;
  forms: FormData[];
}

// Configuration
const CONFIG = {
  BATCH_SIZE: 10, // S·ªë l∆∞·ª£ng forms x·ª≠ l√Ω trong 1 batch
  MAX_RETRIES: 3,
  RETRY_DELAY: 2000, // 2 seconds
  TRANSACTION_TIMEOUT: 120000, // 2 minutes
  MAX_WAIT: 30000, // 30 seconds
};

/**
 * Sleep function for retry delays
 */
const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

/**
 * Validate JSON data structure
 */
function validateData(data: any[]): data is TypeData[] {
  if (!Array.isArray(data)) {
    throw new Error("Data ph·∫£i l√† m·ªôt array");
  }

  for (const typeData of data) {
    if (!typeData.type || typeof typeData.type !== "string") {
      throw new Error("M·ªói item ph·∫£i c√≥ thu·ªôc t√≠nh 'type' ki·ªÉu string");
    }

    if (!Array.isArray(typeData.forms)) {
      throw new Error("Thu·ªôc t√≠nh 'forms' ph·∫£i l√† m·ªôt array");
    }

    for (const form of typeData.forms) {
      const requiredFields = [
        "templateuid",
        "code",
        "name",
        "ismultiple",
        "seq",
      ];
      for (const field of requiredFields) {
        if (form[field] === undefined || form[field] === null) {
          throw new Error(`Form thi·∫øu thu·ªôc t√≠nh b·∫Øt bu·ªôc: ${field}`);
        }
      }
    }
  }

  return true;
}

/**
 * Process forms in batches to avoid overwhelming the database
 */
async function processForms(
  tx: any,
  forms: FormData[],
  formTypeId: number
): Promise<void> {
  const batches = [];

  // Chia forms th√†nh c√°c batch nh·ªè
  for (let i = 0; i < forms.length; i += CONFIG.BATCH_SIZE) {
    batches.push(forms.slice(i, i + CONFIG.BATCH_SIZE));
  }

  let processedCount = 0;

  for (const batch of batches) {
    console.log(
      `  üì¶ X·ª≠ l√Ω batch ${Math.floor(processedCount / CONFIG.BATCH_SIZE) + 1}/${
        batches.length
      } (${batch.length} forms)`
    );

    for (const formData of batch) {
      try {
        // T·∫°o Form
        const form = await tx.form.create({
          data: {
            templateuid: formData.templateuid,
            code: formData.code,
            name: formData.name,
            ismultiple: formData.ismultiple,
            seq: formData.seq,
            formTypeId: formTypeId,
          },
        });

        // T·∫°o FormDetails n·∫øu c√≥ (s·ª≠ d·ª•ng createMany ƒë·ªÉ t·ªëi ∆∞u)
        if (formData.formdetails && formData.formdetails.length > 0) {
          await tx.formDetail.createMany({
            data: formData.formdetails.map((detail) => ({
              key: detail.key,
              value: detail.value,
              formId: form.id,
            })),
            skipDuplicates: true, // B·ªè qua duplicates n·∫øu c√≥
          });
        }

        processedCount++;

        // Log progress
        if (processedCount % 5 === 0) {
          console.log(
            `    ‚úÖ ƒê√£ x·ª≠ l√Ω ${processedCount}/${forms.length} forms`
          );
        }
      } catch (error) {
        console.error(`‚ùå L·ªói khi t·∫°o form ${formData.code}:`, error);
        throw error;
      }
    }
  }
}

/**
 * Process a single FormType with its forms
 */
async function processFormType(typeData: TypeData): Promise<void> {
  await prisma.$transaction(
    async (tx: any) => {
      console.log(`üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω FormType: "${typeData.type}"`);

      // Ki·ªÉm tra xem FormType ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingFormType = await tx.formType.findFirst({
        where: { type: typeData.type },
      });

      let formType;
      if (existingFormType) {
        console.log(
          `  ‚ö†Ô∏è  FormType "${typeData.type}" ƒë√£ t·ªìn t·∫°i, s·∫Ω s·ª≠ d·ª•ng l·∫°i`
        );
        formType = existingFormType;
      } else {
        // T·∫°o FormType m·ªõi
        formType = await tx.formType.create({
          data: { type: typeData.type },
        });
        console.log(`  ‚úÖ T·∫°o FormType m·ªõi: "${typeData.type}"`);
      }

      // X·ª≠ l√Ω c√°c Forms
      if (typeData.forms.length > 0) {
        console.log(`  üìã B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ${typeData.forms.length} forms`);
        await processForms(tx, typeData.forms, formType.id);
        console.log(
          `  ‚úÖ Ho√†n th√†nh x·ª≠ l√Ω t·∫•t c·∫£ forms cho FormType "${typeData.type}"`
        );
      } else {
        console.log(
          `  ‚ö†Ô∏è  Kh√¥ng c√≥ forms n√†o ƒë·ªÉ x·ª≠ l√Ω cho FormType "${typeData.type}"`
        );
      }
    },
    {
      maxWait: CONFIG.MAX_WAIT,
      timeout: CONFIG.TRANSACTION_TIMEOUT,
    }
  );
}

/**
 * Main import function with retry logic
 */
async function importData(): Promise<void> {
  try {
    console.log("üîÑ B·∫Øt ƒë·∫ßu qu√° tr√¨nh import d·ªØ li·ªáu...");

    // ƒê·ªçc v√† validate file JSON
    const filePath = path.join(process.cwd(), "form-codes.json");

    if (!fs.existsSync(filePath)) {
      throw new Error(`File kh√¥ng t·ªìn t·∫°i: ${filePath}`);
    }

    console.log(`üìñ ƒê·ªçc file: ${filePath}`);
    const jsonData = fs.readFileSync(filePath, "utf8");

    let data: any;
    try {
      data = JSON.parse(jsonData);
    } catch (parseError) {
      throw new Error(`L·ªói parse JSON: ${parseError}`);
    }

    // Validate d·ªØ li·ªáu
    console.log("üîç Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu...");
    validateData(data);

    console.log(`‚úÖ D·ªØ li·ªáu h·ª£p l·ªá. T√¨m th·∫•y ${data.length} FormTypes`);

    // ƒê·∫øm t·ªïng s·ªë forms
    const totalForms = data.reduce(
      (sum: number, typeData: TypeData) => sum + typeData.forms.length,
      0
    );
    console.log(`üìä T·ªïng s·ªë forms s·∫Ω ƒë∆∞·ª£c import: ${totalForms}`);

    // X·ª≠ l√Ω t·ª´ng FormType
    let processedTypes = 0;
    for (const typeData of data) {
      try {
        await processFormType(typeData);
        processedTypes++;
        console.log(
          `‚úÖ Ho√†n th√†nh FormType ${processedTypes}/${data.length}: "${typeData.type}"`
        );
        console.log("‚îÄ".repeat(50));
      } catch (error) {
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω FormType "${typeData.type}":`, error);
        throw error;
      }
    }

    console.log("üéâ Import d·ªØ li·ªáu th√†nh c√¥ng!");
    console.log(`üìà Th·ªëng k√™:`);
    console.log(`   - FormTypes ƒë√£ x·ª≠ l√Ω: ${processedTypes}`);
    console.log(`   - T·ªïng Forms ƒë√£ import: ${totalForms}`);
  } catch (error) {
    console.error("üí• L·ªói trong qu√° tr√¨nh import:", error);
    throw error;
  }
}

/**
 * Main function with retry mechanism
 */
async function main(): Promise<void> {
  let lastError: Error | null = null;

  for (let attempt = 1; attempt <= CONFIG.MAX_RETRIES; attempt++) {
    try {
      console.log(`\nüîÑ L·∫ßn th·ª≠ ${attempt}/${CONFIG.MAX_RETRIES}`);

      // Test database connection
      await prisma.$connect();
      console.log("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng");

      await importData();

      console.log("üéä Qu√° tr√¨nh import ho√†n t·∫•t th√†nh c√¥ng!");
      return; // Success - exit function
    } catch (error) {
      lastError = error as Error;
      console.error(`‚ùå L·∫ßn th·ª≠ ${attempt} th·∫•t b·∫°i:`, error);

      if (attempt < CONFIG.MAX_RETRIES) {
        console.log(
          `‚è≥ Ch·ªù ${CONFIG.RETRY_DELAY / 1000} gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...`
        );
        await sleep(CONFIG.RETRY_DELAY);
      }
    }
  }

  // N·∫øu t·∫•t c·∫£ c√°c l·∫ßn th·ª≠ ƒë·ªÅu th·∫•t b·∫°i
  console.error(`üí• ƒê√£ th·ª≠ ${CONFIG.MAX_RETRIES} l·∫ßn nh∆∞ng v·∫´n th·∫•t b·∫°i`);
  throw lastError;
}

/**
 * Cleanup function
 */
async function cleanup(): Promise<void> {
  try {
    await prisma.$disconnect();
    console.log("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi database");
  } catch (error) {
    console.error("‚ö†Ô∏è  L·ªói khi ng·∫Øt k·∫øt n·ªëi database:", error);
  }
}

// Handle process termination
process.on("SIGINT", async () => {
  console.log("\nüõë Nh·∫≠n t√≠n hi·ªáu d·ª´ng, ƒëang cleanup...");
  await cleanup();
  process.exit(0);
});

process.on("SIGTERM", async () => {
  console.log("\nüõë Nh·∫≠n t√≠n hi·ªáu terminate, ƒëang cleanup...");
  await cleanup();
  process.exit(0);
});

// Execute main function
main()
  .catch(async (error) => {
    console.error("üí• L·ªói kh√¥ng th·ªÉ kh√¥i ph·ª•c:", error);
    await cleanup();
    process.exit(1);
  })
  .finally(async () => {
    await cleanup();
  });

export { main, importData, processFormType };
